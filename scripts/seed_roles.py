#Seed default roles into the database, creates roles if they do not exist,
#run script with python -m script.seed_roles
#use powershell script if encountering environment issues with path

#inserts base data into db so app during local development and testing
#instantly populate roles for testing, as well as clear them






#keep this above other imports
import os
from dotenv import load_dotenv
load_dotenv()
#keep this above other imports

from fitfactor.security.password_handler import hash_pass
from fitfactor import create_app #from __init__
from fitfactor.extensions import db
from fitfactor.models import Role, User


def roles():
    app = create_app()

    with app.app_context():
        # Defines the roles
        default_roles = ["User", "Trainer", "Admin"]

        for role_name in default_roles:
            existing_role = Role.query.filter_by(role_name=role_name).first()
            if existing_role:
                print(f"Role '{role_name}' already exists. Skipping...")
            else:
                db.session.add(Role(role_name=role_name))
                print(f"Role '{role_name}' created.")

        db.session.commit()
        print("Finished seeding roles.")

        # Retrieve admin credentials from environment or fallback defaults
        admin_email = os.getenv("SEED_ADMIN_EMAIL", "admin@example.com")
        admin_pw = os.getenv("SEED_ADMIN_PW", "adminpass")

        # Checks if admin exists already
        existing_admin = User.query.filter_by(email=admin_email).first()
        if existing_admin:
            print(f"Admin user with email '{admin_email}' already exists. No new user created.")
        else:
            admin_role = Role.query.filter_by(role_name="Admin").first()
            if not admin_role:
                print("Admin role missing, cannot create admin user.")
                return

            admin_user = User(
                username="admin",
                email=admin_email,
                password=hash_pass(admin_pw), #from password_handler
                role=admin_role
            )
            db.session.add(admin_user)
            db.session.commit()
            print(f"Admin account created successfully with email '{admin_email}'.")



        #THE FOLLOWING TEST BLOCK WAS GENERATED BY CHATGPT
        #####################################################################
        # Insert test user for login route testing (email: test@test.com)
        test_email = "test@test.com"
        existing_test = User.query.filter_by(email=test_email).first()
        if existing_test:
            print(f"Test user '{test_email}' already exists. No new user created.")
        else:
            user_role = Role.query.filter_by(role_name="User").first()
            if not user_role:
                print("User role missing, cannot create test user.")
                return

            test_user = User(
                username="TestUser",
                email=test_email,
                password=hash_pass("123"),
                role=user_role
            )
            db.session.add(test_user)
            db.session.commit()
            print(f"Test user created successfully with email '{test_email}'.")
        #####################################################################################


if __name__ == "__main__":
    roles()
